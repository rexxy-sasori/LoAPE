apiVersion: v1
kind: Namespace
metadata:
  name: green-serverless
  labels:
    name: green-serverless
    environment: dev # Optional: Add labels for better organization
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cpu-affinity-sa
  namespace: green-serverless
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cpu-affinity-clusterrole
rules:
- apiGroups: [""]
  resources: ["pods", "nodes"]  # Access to Pods and Nodes across the cluster
  verbs: ["get", "list", "watch", "update", "patch"]
- apiGroups: ["apps"]
  resources: ["deployments"]  # Access to Deployments across all namespaces
  verbs: ["get", "list", "watch", "update", "patch"]
- apiGroups: [""]
  resources: ["namespaces"]  # Access to Namespaces (if needed)
  verbs: ["get", "list", "watch"]
- apiGroups: ["serving.knative.dev"]  # Add this rule for Knative services
  resources: ["services"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cpu-affinity-clusterrolebinding
subjects:
- kind: ServiceAccount
  name: cpu-affinity-sa
  namespace: green-serverless  # The namespace where the ServiceAccount exists
roleRef:
  kind: ClusterRole
  name: cpu-affinity-clusterrole
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-scheduler-plugin
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-scheduler-plugin
rules:
- apiGroups: [""] # Core API group
  resources:
    - pods
    - pods/binding # Add this line
    - nodes
    - bindings
    - events
    - namespaces
    - persistentvolumeclaims
    - persistentvolumes
    - replicationcontrollers
    - configmaps
    - endpoints
    - services
    - secrets
    - serviceaccounts
  verbs:
    - get
    - list
    - watch
    - create
    - update
    - patch
    - delete
- apiGroups: ["apps"] # Apps API group
  resources:
    - replicasets
    - statefulsets
    - daemonsets
    - deployments
  verbs:
    - get
    - list
    - watch
- apiGroups: ["storage.k8s.io"] # Storage API group
  resources:
    - csidrivers
    - csinodes
    - csistoragecapacities
    - storageclasses
    - volumeattachments
  verbs:
    - get
    - list
    - watch
- apiGroups: ["policy"] # Policy API group
  resources:
    - poddisruptionbudgets
  verbs:
    - get
    - list
    - watch
- apiGroups: ["events.k8s.io"] # Events API group
  resources:
    - events
  verbs:
    - create
    - patch
    - update
- apiGroups: ["coordination.k8s.io"] # Coordination API group
  resources:
    - leases
  verbs:
    - get
    - list
    - watch
    - create
    - update
    - patch
    - delete
- apiGroups: ["scheduling.k8s.io"] # Scheduling API group
  resources:
    - priorityclasses
  verbs:
    - get
    - list
    - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-scheduler-plugin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-scheduler-plugin
subjects:
- kind: ServiceAccount
  name: my-scheduler-plugin
  namespace: kube-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cpu-affinity-controller
  namespace: green-serverless
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cpu-affinity-controller
  template:
    metadata:
      labels:
        app: cpu-affinity-controller
    spec:
      nodeSelector:
        benchmark: "no"
      serviceAccountName: cpu-affinity-sa
      containers:
      - name: controller
        image: intel-112:5000/my-cpu-affinity-controller:amd64
        imagePullPolicy: Always
        args:
        - "--resync-period=5s"
        - "--check-period=10s"
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        resources:
          limits:
            cpu: "500m"
            memory: "512Mi"
          requests:
            cpu: "250m"
            memory: "256Mi"
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cpu-affinity-node-agent
  namespace: green-serverless
spec:
  selector:
    matchLabels:
      app: cpu-affinity-node-agent
  template:
    metadata:
      labels:
        app: cpu-affinity-node-agent
    spec:
      nodeSelector:
        node_type: "fusion"
      serviceAccountName: cpu-affinity-sa
      initContainers:
      - name: wait-for-controller
        image: intel-112:5000/bitnami/kubectl:latest # Use an image with kubectl installed
        command:
        - sh
        - -c
        - |
          # Wait for the controller pod to be in the "Running" state
          while ! kubectl get pods -n green-serverless -l app=cpu-affinity-controller -o jsonpath='{.items[*].status.phase}' | grep -q "Running"; do
            echo "Waiting for cpu-affinity-controller to be ready..."
            sleep 5
          done
          echo "cpu-affinity-controller is ready!"
      hostPID: true
      containers:
      - name: node-agent
        image: intel-112:5000/my-cpu-affinity-node-agent:amd64
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: metrics
          protocol: TCP
        args:
        - "--namespace=default"  # Updated to match your target namespace
        - "--resync-period=0"
        - "--perf-sample-period-ms=2000"
        - "-v=2"
        - "--adjust-deletion-cost-period=1s"
        - "--collect-training-data-period=1m"
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        resources:
          limits:
            cpu: "4"
            memory: "8Gi"
          requests:
            cpu: "250m"
            memory: "256Mi"
        volumeMounts:
        - name: usr-bin
          mountPath: /usr/bin
        - name: usr-lib64
          mountPath: /usr/lib64
          readOnly: true
        - name: usr-lib
          mountPath: /usr/lib
          readOnly: true
        - name: containerd
          mountPath: /run/k3s/containerd
          readOnly: true
        - name: usr-local-bin
          mountPath: /usr/local/bin
          readOnly: true
        securityContext:
          privileged: true
          capabilities:
            add:
            - SYS_ADMIN
            - SYS_RESOURCE
            - NET_ADMIN
      volumes:
      - name: usr-bin
        hostPath:
          path: /usr/bin
      - name: usr-lib64
        hostPath:
          path: /usr/lib64
      - name: usr-lib
        hostPath:
          path: /usr/lib
      - name: containerd
        hostPath:
          path: /run/k3s/containerd
      - name: usr-local-bin
        hostPath:
          path: /usr/local/bin
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-scheduler-plugin
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-scheduler-plugin
  template:
    metadata:
      labels:
        app: my-scheduler-plugin
    spec:
      nodeSelector:
        node_type: intel
      serviceAccountName: my-scheduler-plugin
      containers:
      - name: my-scheduler-plugin
        image: intel-112:5000/my-cpu-affinity-scheduler-plugin:amd64
        imagePullPolicy: Always
        args:
        - --v=4 # Log level
        - --config=/etc/kubernetes/scheduler-config.yaml # Path to scheduler config
        volumeMounts:
        - name: scheduler-config
          mountPath: /etc/kubernetes
        env:
        - name: TARGET_NAMESPACE
          value: "default" # Set the target namespace here
      volumes:
        - name: scheduler-config
          configMap:
            name: scheduler-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: scheduler-config
  namespace: kube-system
data:
  scheduler-config.yaml: |
    apiVersion: kubescheduler.config.k8s.io/v1
    kind: KubeSchedulerConfiguration
    leaderElection:
      leaderElect: true
      resourceNamespace: kube-system
      resourceName: my-scheduler-plugin
    profiles:
      - schedulerName: my-scheduler-plugin
        plugins:
          postBind:
            enabled:
              - name: "MyPostBindPlugin"
        pluginConfig:
          - name: MyPostBindPlugin
            args:
              namespace: "default"
---
apiVersion: v1
kind: Pod
metadata:
  name: test-pod
  namespace: green-serverless
  labels:
    app: my-scheduler-test-pod
spec:
  schedulerName: my-scheduler-plugin
  containers:
  - name: curl-test-pod
    image: intel-112:5000/nginx