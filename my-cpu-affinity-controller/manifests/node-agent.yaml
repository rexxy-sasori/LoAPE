apiVersion: v1
kind: ServiceAccount
metadata:
  name: cpu-affinity-sa
  namespace: green-serverless
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cpu-affinity-clusterrole
rules:
- apiGroups: [""]
  resources: ["pods", "nodes"]  # Access to Pods and Nodes across the cluster
  verbs: ["get", "list", "watch", "update", "patch"]
- apiGroups: ["apps"]
  resources: ["deployments"]  # Access to Deployments across all namespaces
  verbs: ["get", "list", "watch", "update", "patch"]
- apiGroups: [""]
  resources: ["namespaces"]  # Access to Namespaces (if needed)
  verbs: ["get", "list", "watch"]
- apiGroups: ["serving.knative.dev"]  # Add this rule for Knative services
  resources: ["services"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cpu-affinity-clusterrolebinding
subjects:
- kind: ServiceAccount
  name: cpu-affinity-sa
  namespace: green-serverless  # The namespace where the ServiceAccount exists
roleRef:
  kind: ClusterRole
  name: cpu-affinity-clusterrole
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cpu-affinity-node-agent
  namespace: green-serverless
spec:
  selector:
    matchLabels:
      app: cpu-affinity-node-agent
  template:
    metadata:
      labels:
        app: cpu-affinity-node-agent
    spec:
      nodeSelector:
        node_type: "fusion"
      serviceAccountName: cpu-affinity-sa
      initContainers:
      - name: wait-for-controller
        image: intel-112:5000/bitnami/kubectl:latest # Use an image with kubectl installed
        command:
        - sh
        - -c
        - |
          # Wait for the controller pod to be in the "Running" state
          while ! kubectl get pods -n green-serverless -l app=cpu-affinity-controller -o jsonpath='{.items[*].status.phase}' | grep -q "Running"; do
            echo "Waiting for cpu-affinity-controller to be ready..."
            sleep 5
          done
          echo "cpu-affinity-controller is ready!"
      hostPID: true
      containers:
      - name: node-agent
        image: intel-112:5000/my-cpu-affinity-node-agent:amd64
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: metrics
          protocol: TCP
        args:
        - "--namespace=default"  # Updated to match your target namespace
        - "--resync-period=0"
        - "--perf-sample-period-ms=2000"
        - "-v=2"
        - "--adjust-deletion-cost-period=1s"
        - "--collect-training-data-period=1m"
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        resources:
          limits:
            cpu: "4"
            memory: "8Gi"
          requests:
            cpu: "250m"
            memory: "256Mi"
        volumeMounts:
        - name: usr-bin
          mountPath: /usr/bin
        - name: usr-lib64
          mountPath: /usr/lib64
          readOnly: true
        - name: usr-lib
          mountPath: /usr/lib
          readOnly: true
        - name: containerd
          mountPath: /run/k3s/containerd
          readOnly: true
        - name: usr-local-bin
          mountPath: /usr/local/bin
          readOnly: true
        securityContext:
          privileged: true
          capabilities:
            add:
            - SYS_ADMIN
            - SYS_RESOURCE
            - NET_ADMIN
      volumes:
      - name: usr-bin
        hostPath:
          path: /usr/bin
      - name: usr-lib64
        hostPath:
          path: /usr/lib64
      - name: usr-lib
        hostPath:
          path: /usr/lib
      - name: containerd
        hostPath:
          path: /run/k3s/containerd
      - name: usr-local-bin
        hostPath:
          path: /usr/local/bin 